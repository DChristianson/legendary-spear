import math
import sys
import colorsys
from collections import Counter
from functools import cache
from PIL import Image, ImageMath

stella_colors_base = [
  (0x00, 0x00, 0x00), (0x4a, 0x4a, 0x4a), (0x6f, 0x6f, 0x6f), (0x8e, 0x8e, 0x8e),
  (0xaa, 0xaa, 0xaa), (0xc0, 0xc0, 0xc0), (0xd6, 0xd6, 0xd6), (0xec, 0xec, 0xec),
  (0x48, 0x48, 0x00), (0x69, 0x69, 0x0f), (0x86, 0x86, 0x1d), (0xa2, 0xa2, 0x2a),
  (0xbb, 0xbb, 0x35), (0xd2, 0xd2, 0x40), (0xe8, 0xe8, 0x4a), (0xfc, 0xfc, 0x54),
  (0x7c, 0x2c, 0x00), (0x90, 0x48, 0x11), (0xa2, 0x62, 0x21), (0xb4, 0x7a, 0x30),
  (0xc3, 0x90, 0x3d), (0xd2, 0xa4, 0x4a), (0xdf, 0xb7, 0x55), (0xec, 0xc8, 0x60),
  (0x90, 0x1c, 0x00), (0xa3, 0x39, 0x15), (0xb5, 0x53, 0x28), (0xc6, 0x6c, 0x3a),
  (0xd5, 0x82, 0x4a), (0xe3, 0x97, 0x59), (0xf0, 0xaa, 0x67), (0xfc, 0xbc, 0x74),
  (0x94, 0x00, 0x00), (0xa7, 0x1a, 0x1a), (0xb8, 0x32, 0x32), (0xc8, 0x48, 0x48),
  (0xd6, 0x5c, 0x5c), (0xe4, 0x6f, 0x6f), (0xf0, 0x80, 0x80), (0xfc, 0x90, 0x90),
  (0x84, 0x00, 0x64), (0x97, 0x19, 0x7a), (0xa8, 0x30, 0x8f), (0xb8, 0x46, 0xa2),
  (0xc6, 0x59, 0xb3), (0xd4, 0x6c, 0xc3), (0xe0, 0x7c, 0xd2), (0xec, 0x8c, 0xe0),
  (0x50, 0x00, 0x84), (0x68, 0x19, 0x9a), (0x7d, 0x30, 0xad), (0x92, 0x46, 0xc0),
  (0xa4, 0x59, 0xd0), (0xb5, 0x6c, 0xe0), (0xc5, 0x7c, 0xee), (0xd4, 0x8c, 0xfc),
  (0x14, 0x00, 0x90), (0x33, 0x1a, 0xa3), (0x4e, 0x32, 0xb5), (0x68, 0x48, 0xc6),
  (0x7f, 0x5c, 0xd5), (0x95, 0x6f, 0xe3), (0xa9, 0x80, 0xf0), (0xbc, 0x90, 0xfc),
  (0x00, 0x00, 0x94), (0x18, 0x1a, 0xa7), (0x2d, 0x32, 0xb8), (0x42, 0x48, 0xc8),
  (0x54, 0x5c, 0xd6), (0x65, 0x6f, 0xe4), (0x75, 0x80, 0xf0), (0x84, 0x90, 0xfc),
  (0x00, 0x1c, 0x88), (0x18, 0x3b, 0x9d), (0x2d, 0x57, 0xb0), (0x42, 0x72, 0xc2),
  (0x54, 0x8a, 0xd2), (0x65, 0xa0, 0xe1), (0x75, 0xb5, 0xef), (0x84, 0xc8, 0xfc),
  (0x00, 0x30, 0x64), (0x18, 0x50, 0x80), (0x2d, 0x6d, 0x98), (0x42, 0x88, 0xb0),
  (0x54, 0xa0, 0xc5), (0x65, 0xb7, 0xd9), (0x75, 0xcc, 0xeb), (0x84, 0xe0, 0xfc),
  (0x00, 0x40, 0x30), (0x18, 0x62, 0x4e), (0x2d, 0x81, 0x69), (0x42, 0x9e, 0x82),
  (0x54, 0xb8, 0x99), (0x65, 0xd1, 0xae), (0x75, 0xe7, 0xc2), (0x84, 0xfc, 0xd4),
  (0x00, 0x44, 0x00), (0x1a, 0x66, 0x1a), (0x32, 0x84, 0x32), (0x48, 0xa0, 0x48),
  (0x5c, 0xba, 0x5c), (0x6f, 0xd2, 0x6f), (0x80, 0xe8, 0x80), (0x90, 0xfc, 0x90),
  (0x14, 0x3c, 0x00), (0x35, 0x5f, 0x18), (0x52, 0x7e, 0x2d), (0x6e, 0x9c, 0x42),
  (0x87, 0xb7, 0x54), (0x9e, 0xd0, 0x65), (0xb4, 0xe7, 0x75), (0xc8, 0xfc, 0x84),
  (0x30, 0x38, 0x00), (0x50, 0x59, 0x16), (0x6d, 0x76, 0x2b), (0x88, 0x92, 0x3e),
  (0xa0, 0xab, 0x4f), (0xb7, 0xc2, 0x5f), (0xcc, 0xd8, 0x6e), (0xe0, 0xec, 0x7c),
  (0x48, 0x2c, 0x00), (0x69, 0x4d, 0x14), (0x86, 0x6a, 0x26), (0xa2, 0x86, 0x38),
  (0xbb, 0x9f, 0x47), (0xd2, 0xb6, 0x56), (0xe8, 0xcc, 0x63), (0xfc, 0xe0, 0x70)
]
stella_ntsc_colors = dict({2 * i : v for i, v in enumerate(stella_colors_base)})

rt_rgb_colors = {
    0x00: (0x00, 0x00, 0x00),
    0x02: (0x1A, 0x1A, 0x1A),
    0x04: (0x39, 0x39, 0x39),
    0x06: (0x5B, 0x5B, 0x5B),
    0x08: (0x7E, 0x7E, 0x7E),
    0x0A: (0xA2, 0xA2, 0xA2),
    0x0C: (0xC7, 0xC7, 0xC7),
    0x0E: (0xED, 0xED, 0xED),
    0x10: (0x19, 0x02, 0x00),
    0x12: (0x3A, 0x1F, 0x00),
    0x14: (0x5D, 0x41, 0x00),
    0x16: (0x82, 0x64, 0x00),
    0x18: (0xA7, 0x88, 0x00),
    0x1A: (0xCC, 0xAD, 0x00),
    0x1C: (0xF2, 0xD2, 0x19),
    0x1E: (0xFE, 0xFA, 0x40),
    0x20: (0x37, 0x00, 0x00),
    0x22: (0x5E, 0x08, 0x00),
    0x24: (0x83, 0x27, 0x00),
    0x26: (0xA9, 0x49, 0x00),
    0x28: (0xCF, 0x6C, 0x00),
    0x2A: (0xF5, 0x8F, 0x17),
    0x2C: (0xFE, 0xB4, 0x38),
    0x2E: (0xFE, 0xDF, 0x6F),
    0x30: (0x47, 0x00, 0x00),
    0x32: (0x73, 0x00, 0x00),
    0x34: (0x98, 0x13, 0x00),
    0x36: (0xBE, 0x32, 0x16),
    0x38: (0xE4, 0x53, 0x35),
    0x3A: (0xFE, 0x76, 0x57),
    0x3C: (0xFE, 0x9C, 0x81),
    0x3E: (0xFE, 0xC6, 0xBB),
    0x40: (0x44, 0x00, 0x08),
    0x42: (0x6F, 0x00, 0x1F),
    0x44: (0x96, 0x06, 0x40),
    0x46: (0xBB, 0x24, 0x62),
    0x48: (0xE1, 0x45, 0x85),
    0x4A: (0xFE, 0x67, 0xAA),
    0x4C: (0xFE, 0x8C, 0xD6),
    0x4E: (0xFE, 0xB7, 0xF6),
    0x50: (0x2D, 0x00, 0x4A),
    0x52: (0x57, 0x00, 0x67),
    0x54: (0x7D, 0x05, 0x8C),
    0x56: (0xA1, 0x22, 0xB1),
    0x58: (0xC7, 0x43, 0xD7),
    0x5A: (0xED, 0x65, 0xFE),
    0x5C: (0xFE, 0x8A, 0xF6),
    0x5E: (0xFE, 0xB5, 0xF7),
    0x60: (0x0D, 0x00, 0x82),
    0x62: (0x33, 0x00, 0xA2),
    0x64: (0x55, 0x0F, 0xC9),
    0x66: (0x78, 0x2D, 0xF0),
    0x68: (0x9C, 0x4E, 0xFE),
    0x6A: (0xC3, 0x72, 0xFE),
    0x6C: (0xEB, 0x98, 0xFE),
    0x6E: (0xFE, 0xC0, 0xF9),
    0x70: (0x00, 0x00, 0x91),
    0x72: (0x0A, 0x05, 0xBD),
    0x74: (0x28, 0x22, 0xE4),
    0x76: (0x48, 0x42, 0xFE),
    0x78: (0x6B, 0x64, 0xFE),
    0x7A: (0x90, 0x8A, 0xFE),
    0x7C: (0xB7, 0xB0, 0xFE),
    0x7E: (0xDF, 0xD8, 0xFE),
    0x80: (0x00, 0x00, 0x72),
    0x82: (0x00, 0x1C, 0xAB),
    0x84: (0x03, 0x3C, 0xD6),
    0x86: (0x20, 0x5E, 0xFD),
    0x88: (0x40, 0x81, 0xFE),
    0x8A: (0x64, 0xA6, 0xFE),
    0x8C: (0x89, 0xCE, 0xFE),
    0x8E: (0xB0, 0xF6, 0xFE),
    0x90: (0x00, 0x10, 0x3A),
    0x92: (0x00, 0x31, 0x6E),
    0x94: (0x00, 0x55, 0xA2),
    0x96: (0x05, 0x79, 0xC8),
    0x98: (0x23, 0x9D, 0xEE),
    0x9A: (0x44, 0xC2, 0xFE),
    0x9C: (0x68, 0xE9, 0xFE),
    0x9E: (0x8F, 0xFE, 0xFE),
    0xA0: (0x00, 0x1F, 0x02),
    0xA2: (0x00, 0x43, 0x26),
    0xA4: (0x00, 0x69, 0x57),
    0xA6: (0x00, 0x8D, 0x7A),
    0xA8: (0x1B, 0xB1, 0x9E),
    0xAA: (0x3B, 0xD7, 0xC3),
    0xAC: (0x5D, 0xFE, 0xE9),
    0xAE: (0x86, 0xFE, 0xFE),
    0xB0: (0x00, 0x24, 0x03),
    0xB2: (0x00, 0x4A, 0x05),
    0xB4: (0x00, 0x70, 0x0C),
    0xB6: (0x09, 0x95, 0x2B),
    0xB8: (0x28, 0xBA, 0x4C),
    0xBA: (0x49, 0xE0, 0x6E),
    0xBC: (0x6C, 0xFE, 0x92),
    0xBE: (0x97, 0xFE, 0xB5),
    0xC0: (0x00, 0x21, 0x02),
    0xC2: (0x00, 0x46, 0x04),
    0xC4: (0x08, 0x6B, 0x00),
    0xC6: (0x28, 0x90, 0x00),
    0xC8: (0x49, 0xB5, 0x09),
    0xCA: (0x6B, 0xDB, 0x28),
    0xCC: (0x8F, 0xFE, 0x49),
    0xCE: (0xBB, 0xFE, 0x69),
    0xD0: (0x00, 0x15, 0x01),
    0xD2: (0x10, 0x36, 0x00),
    0xD4: (0x30, 0x59, 0x00),
    0xD6: (0x53, 0x7E, 0x00),
    0xD8: (0x76, 0xA3, 0x00),
    0xDA: (0x9A, 0xC8, 0x00),
    0xDC: (0xBF, 0xEE, 0x1E),
    0xDE: (0xE8, 0xFE, 0x3E),
    0xE0: (0x1A, 0x02, 0x00),
    0xE2: (0x3B, 0x1F, 0x00),
    0xE4: (0x5E, 0x41, 0x00),
    0xE6: (0x83, 0x64, 0x00),
    0xE8: (0xA8, 0x88, 0x00),
    0xEA: (0xCE, 0xAD, 0x00),
    0xEC: (0xF4, 0xD2, 0x18),
    0xEE: (0xFE, 0xFA, 0x40),
    0xF0: (0x38, 0x00, 0x00),
    0xF2: (0x5F, 0x08, 0x00),
    0xF4: (0x84, 0x27, 0x00),
    0xF6: (0xAA, 0x49, 0x00),
    0xF8: (0xD0, 0x6B, 0x00),
    0xFA: (0xF6, 0x8F, 0x18),
    0xFC: (0xFE, 0xB4, 0x39),
    0xFE: (0xFE, 0xDF, 0x70)
}

rgb_colors = stella_ntsc_colors

@cache
def pct_rgb(r, g, b):
    return r / 255., g / 255., b / 255.

def weight(c, w):
    return list([a * b for a, b in zip(c, w)])

def hsv_coords(h, s, v):
    r = 2.0 * math.pi * h
    x = s * math.cos(r) 
    y = s * math.sin(r)
    z = v
    return x, y, z

idx_lookup = dict({value: key for key, value in rgb_colors.items()})
rgb_pct_colors = dict({key: pct_rgb(*value) for key, value in rgb_colors.items()})
yiq_colors = dict({key: colorsys.rgb_to_yiq(*value) for key, value in rgb_pct_colors.items()})
hsv_colors = dict({key: colorsys.rgb_to_hsv(*value) for key, value in rgb_pct_colors.items()})
hsv_coords_colors = dict({key: hsv_coords(*value) for key, value in hsv_colors.items()})

# http://www.progmat.uaem.mx:8080/artVol2Num2/Articulo3Vol2Num2.pdf
def yiq_distance(c1, c2):
    dy = c1[0] - c2[0]
    di = c1[1] - c2[1]
    dq = c1[2] - c2[2]
    return .5053 * dy * dy + .299 * di * di + .1957 * dq * dq

def eq_yiq_distance(c1, c2):
    dy = c1[0] - c2[0]
    di = c1[1] - c2[1]
    dq = c1[2] - c2[2]
    return dy * dy + di * di + dq * dq

def rgb_distance(c1, c2):
     return sum([d * d for d in [float(a - b) for a, b in zip(c1, c2)]])

def hsv_coords_distance(c1, c2):
    dx = c1[0] - c2[0]
    dy = c1[1] - c2[1]
    dz = c1[2] - c2[2]
    return dx * dx + dy * dy + 10.0 * dz * dz

@cache
def nearest_yiq(c1):
    c1 = colorsys.rgb_to_yiq(*pct_rgb(*c1))
    cd = None
    candidate = None
    for index, color in yiq_colors.items():
        d = yiq_distance(color, c1)
        if cd is None or d < cd:
            candidate = index
            cd = d
    return rgb_colors[candidate]

@cache
def nearest_rgb(c1):
    cd = None
    candidate = None
    for index, color in rgb_colors.items():
        d = rgb_distance(color, c1)
        if cd is None or d < cd:
            candidate = index
            cd = d
    return rgb_colors[candidate]

@cache
def nearest_hsv_coords(c1):
    c1 = hsv_coords(*weight(colorsys.rgb_to_hsv(*pct_rgb(*c1)), (1.0, 1.5, 1.0)))
    cd = None
    candidate = None
    for index, color in hsv_coords_colors.items():
        d = hsv_coords_distance(color, c1)
        if cd is None or d < cd:
            candidate = index
            cd = d
    return rgb_colors[candidate]


def convert(infile, outfile):
    conversions = {}
    with Image.open(infile, 'r') as image:
        if not image.mode == 'RGB':
            image = image.convert(mode='RGB')
        data = []
        for color in image.getdata():
            altcolor = nearest_hsv_coords(color)
            conversions[color] = altcolor
            data.append(altcolor)
        output = Image.new('RGB', image.size)
        output.putdata(data)
        output.save(outfile, 'PNG')
    return conversions

if __name__ == "__main__":
    infile, outfile = sys.argv[1:]
    conversions = convert(infile, outfile)
    colors_used = Counter(conversions.values())
    for color, count in colors_used.items():
        print(idx_lookup[color], color, count)
